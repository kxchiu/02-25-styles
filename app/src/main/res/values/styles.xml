<resources>

    <!--think of this as CSS, without the cascading part-->
    <style name="GeneralText" parent="@android:style/TextAppearance">
        <!--name is the attribute you want to style; content is the value-->
        <!--<item name="android:textSize">20sp</item>
        <item name="android:textColor">#0000F0</item>-->
        <item name="android:layout_width">wrap_content</item>
        <item name="android:layout_height">wrap_content</item>
        <!--the ? refers to the current theme used by the application in Manifest-->
        <item name="android:textColor">?android:colorAccent</item>
    </style>

    <!--<style name="BoldText" parent="@style/GeneralText">-->
    <!--you can use shorter extension with the .
     but for the Android default styles, we must use parent-->
    <style name="GeneralText.Bold">
        <item name="android:textStyle">bold</item>
    </style>

    <style name="GeneralText.Bold.Red">
        <item name="android:textColor">#FF0000</item>
    </style>

    <color name="custom_color">#b0b0ff</color>
    <style name="MyTheme" parent="Theme.AppCompat.Light">
        <item name="android:textColor">#ffb0b0</item>
        <item name="android:windowBackground">@color/custom_color</item>
        <item name="android:colorBackground">#00FF00</item>
    </style>

    <!-- Base application theme. -->
    <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
        <!-- Customize your theme here. -->
        <item name="colorPrimary">@color/colorPrimary</item>
        <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
        <item name="colorAccent">@color/colorAccent</item>
    </style>

</resources>
